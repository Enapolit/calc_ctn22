/*
This is a good layout for a mobile-first CSS template.
Following this flow will minimize the number of styles you need to write and will ensure you are thinking, designing and developing mobile-first.
Most of your styles get written like standard CSS, but for your mobile presentation. Generally speaking, a good mobile presention will stretch out nicely for larger screens.

Sometimes, when we stretch out to larger screens, we need to make minor tweaks for the larger devices -- you can make these tweaks in the tablet media query, or if the issue exists on desktop only, the desktop media query.
You will find this is far easier than the opposite task of using CSS to cram your desktop experience into a mobile device.
*/

/*********************************************************************
 LOADS IN A NICE RESET TO ENSURE ALL BROWSERS HAVE THE SAME BASE STYLES
*********************************************************************/

@import url("https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css");

/*********************************************************************
  YOUR MOBILE/BASE STYLES GO HERE
*********************************************************************/

/** SET BORDER BOX EVERYWHERE */

* {
  box-sizing: border-box;
}

/** APPLY BASE TAG STYLES */

body,
html {
  /* Sets default font-size to 16px, ensuring 1em = 16px; */
  font-size: 16px;
}

/** RESPONSIVE IMAGES */

figure,
img {
  /* Sets image width to match parent */
  width: 100%;
  display: block;
  margin: 0 auto;
}

p {
  line-height: 1.2em;
}

/** Caption styles */

.caption,
figcaption {
  font-size: 0.9rem;
  color: #8e8a8a;
  padding: 5px 0;
}

/** BASE CLASSES */

/** Container styles to keep content from becoming too wide or coming too close to
* mobile edge */

.container {
  width: 100%;
  max-width: 800px;
  padding: 10px;
  margin: 0 auto;
}

/** Images are allowed to be a little wider when broken out into their own container */

.container.image {
  max-width: 1200px;
  padding: 0;
}

.container.image .caption,
.container.image figcaption {
  padding: 5px 10px;
}

/**
* Calculator styles
*/

.calc-container {
  background-color: #f7f7f7;
  /* Calc background is slightly gray and the full width of the page */
  padding: 22px 0;
  /* 22px of vertical padding only */
}

.calculator .row .item img {
  margin: 5px auto;
  /* Air out above and below the image for each item */
}

.qty_container {
  display: flex;
  /* Make the qty_container a flex box so we can juxtapose the qty and unit */
}

.qty_container > div {
  flex-basis: 90%;
  /* Allow the input field in the qty container to take up 90% of the width */
}

/**
* Styling the input fields to be the full width of the parent, with 7px of padding and turns off the default border 
*/

.qty_container input {
  display: block;
  width: 100%;
  margin: 0;
  padding: 7px;
  border: 0;
}

/**
* The unit space has a gray background and takes up the remaining 10% of space as an indicator
* to  the user how qty works
*/

.qty_container .unit {
  flex-basis: 10%;
  background-color: #ccc;
  padding: 6px 0;
  text-align: center;
}

/**
* The individual stores within each item are hidden by default.
* We also apply margins to them to air them out
*/

.peapod,
.freshdirect,
.amazon {
  margin: 5px 0;
  display: none;
}

.peapod.active,
.freshdirect.active,
.amazon.active {
  display: block;
}

.cheap {
  font-weight: bold;
  color: #087c08;
  font-size: 2em;
}

.cheap:after {
  font-family: FontAwesome;
  content: "\f00c";
  margin-left: 5px;
}

/**
* Remove  the  default margin on the H3
*/

.calculator h3 {
  margin: 0;
}

/**
* Create negative space beneath each row
*/

.calculator .row {
  margin-bottom: 15px;
  flex-basis: 30%;
}

/**
* Hide the totals by default until there's been input
* Give the totals row a slightly different background and 100% flex-basis 
*/

.calculator .row.total {
  display: none;
  background-color: #ccc;
  padding: 10px;
  flex-basis: 100%;
}

/*********************************************************************
  YOUR TABLET/DESKTOP STYLES GO HERE
*********************************************************************/

@media (min-width: 681px) {
  /* Any adjustments for tablets and larger go here.
    Note these styles will be applied to anything 681px or larger -- so tablet AND desktop */
  /**
    * Adding the flexbox styles to calculator in the tablet media query allows mobile to stack
    * and for the flexbox to take over by default on larger devices
    */
  .calculator {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  }
}

/*********************************************************************
  YOUR DESKTOP-ONLY STYLES GO HERE
*********************************************************************/

@media (min-width: 769px) {
  /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 769px or larger -- so desktop */
}

/*********************************************************************
  YOUR MEDIUM-DESKTOP-ONLY STYLES GO HERE
*********************************************************************/

@media (min-width: 805px) {
  /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 769px or larger -- so desktop */
  .container {
    padding: 0;
  }
}

/*********************************************************************
  YOUR LARGE DESKTOP-ONLY STYLES GO HERE
*********************************************************************/

@media (min-width: 1205px) {
  /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 769px or larger -- so desktop */
  .container.image .caption,
  .container.image figcaption {
    padding: 5px 0;
  }
}

/*************************************************************************
ANNOTATED IMAGE
**************************************************************************/

//*
This is a good layout for a mobile-first CSS template.
Following this flow will minimize the number of styles you need to write and will ensure you are thinking, designing and developing mobile-first.
Most of your styles get written like standard CSS, but for your mobile presentation. Generally speaking, a good mobile presention will stretch out nicely for larger screens.
Sometimes, when we stretch out to larger screens, we need to make minor tweaks for the larger devices -- you can make these tweaks in the tablet media query, or if the issue exists on desktop only, the desktop media query.
You will find this is far easier than the opposite task of using CSS to cram your desktop experience into a mobile device.
*/


/*********************************************************************
 LOADS IN A NICE RESET TO ENSURE ALL BROWSERS HAVE THE SAME BASE STYLES
*********************************************************************/

@import url('https://cdnjs.cloudflare.com/ajax/libs/normalize/7.0.0/normalize.min.css');

/*********************************************************************
  YOUR MOBILE/BASE STYLES GO HERE
*********************************************************************/


/** SET BORDER BOX EVERYWHERE */

* {
    box-sizing: border-box;
}


/** APPLY BASE TAG STYLES */

body,
html {
    /* Sets default font-size to 16px, ensuring 1em = 16px; */
    font-size: 16px;
    font-family: 'Oxygen', sans-serif;
}


/** RESPONSIVE IMAGES */

figure,
img {
    /* Sets image width to match parent */
    width: 100%;
    display: block;
    margin: 0 auto;
}

p {
    line-height: 1.5em;
}

header {
    margin-bottom: 16px;
}

header p {
    margin: 0;
}


/** Caption styles */

.caption,
figcaption {
    font-size: 0.9rem;
    color: #8e8a8a;
    padding: 5px 0;
}


/** BASE CLASSES */


/** Container styles to keep content from becoming too wide or coming too close to
* mobile edge */

.container {
    width: 100%;
    max-width: 800px;
    padding: 10px;
    margin: 0 auto;
}


/** Images are allowed to be a little wider when broken out into their own container */

.container.image {
    max-width: 1200px;
    padding: 0;
}

.container.image .caption,
.container.image figcaption {
    padding: 5px 10px;
}


/**
* Make the annotated image container relative so it can control absolute objects
*/

.annotate {
    position: relative;
}


/**
* Each of the dots is a rounded square (or circle) made up of congruent width and height, a 50% border radius
* Each dot is positioned absolutely so we can place it wherever over the image
* Each dot has 2px stroke white border so it pops against the image
* Each dot has a hidden overflow so it's inside content is confined to the dot's borders
* Each dot has white text by default
*/

.annotate .dot {
    width: 25px;
    height: 25px;
    border: 2px solid #FFF;
    border-radius: 50%;
    position: absolute;
    overflow: hidden;
    color: #FFF;
}


/**
* The inner div of the dot is also positioned absolutely so that we can enforce vertical center
* It also has 25px of padding, is invisible by default and we specify 100% width because absolute objects need the width specified
* otherwise they are, by default, only as wide as their content requires
*/

.annotate .dot .inner {
    position: absolute;
    opacity: 0;
    color: #FFF;
    padding: 25px;
    width: 100%;
    top: 50%;
    transform: translateY(-50%);
}


/**
* The close button is absolutely positioned to the top right, is invisible by default and we
* eliminate the link underline. The default link blue becomes white
*/

.annotate .dot .close {
    color: #FFF;
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 2em;
    text-decoration: none;
    opacity: 0;
}


/**
* We establish classes for the background colors
*/

.annotate .dot.green {
    background-color: rgba(0, 110, 65, 0.65);
}

.annotate .dot.purple {
    background-color: rgba(74, 2, 242, 0.65);
}

.annotate .dot.red {
    background-color: rgba(230, 11, 65, 0.65);
}

.annotate .dot.blue {
    background-color: rgba(11, 18, 230, 0.65);
}

.annotate .dot.pink {
    background-color: rgba(240, 12, 182, 0.65);
}


/**
* Use IDs to position the dots. The IDs include a :not pseudo-selector so that the dot's active class can override these behaviors
*/


#camera:not(.active) {
    top: 18%;
    right: 84%;
}

#moxie:not(.active) {
    bottom: 95%;
    right:20%;
}

#arm:not(.active) {
    top: 70%;
    right: 84%;
}

#wheels:not(.active) {
    top: 50%;
    right: 69%;
}

#battery:not(.active) {
    top: 16%;
    right: 40%;
}


/**
* When the dot has an active class, make it a rectangle that is congruently sized to the image. 
* Reverse the border radius and positioning logic
* Set the z-index to 2 so that the rectangle is on top of the picture and all of the other dots
*/

.annotate .dot.active {
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
    border-radius: 0;
    border: 0;
    z-index: 2;
}


/**
* When a dot is active, it's .inner and .close elements
* should be made opaque with a transition so that the visually fade-in
*/

.annotate .dot.active .inner,
.annotate .dot.active .close {
    opacity: 1;
    transition: opacity 0.5s ease-in-out;
}


/**
* Set the collage up as a flexbox
*/

.collage {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
}


/**
* Each image div is half the width of the box with 2.5px of padding.
* 2.5px is used because when the images are up against each other their
* combined padding creates the desired 5px of negative space
*/

.collage .img {
    flex-basis: 50%;
    padding: 2.5px;
}


/**
* Eliminate the right padding from the even children so the image goes full bleed
*/

.collage .img:nth-child(even) {
    padding-right: 0;
}


/**
* Eliminate the left padding from the odd children so the image goes full bleed
*/

.collage .img:nth-child(odd) {
    padding-left: 0;
}


/*********************************************************************
  YOUR TABLET/DESKTOP STYLES GO HERE
*********************************************************************/

@media(min-width: 681px) {
    /* Any adjustments for tablets and larger go here.
    Note these styles will be applied to anything 681px or larger -- so tablet AND desktop */
    /**
    * Increase the padding on desktop because it's nicer
    */
    .annotate .dot.active .inner {
        padding: 75px;
    }
    /**
    * Some dots may need to be slightly repositioned on tablet compared to mobile.
    * We can do that here
    */
    #arm:not(.active) {
        top: 53%;
        right: 26%;
    }
    #moxie:not(.active) {
        bottom: 43%;
        left: 27%;
    }
    #battery:not(.active) {
        top: 44%;
        left: 13%;
    }
}


/*********************************************************************
  YOUR DESKTOP-ONLY STYLES GO HERE
*********************************************************************/

@media(min-width: 769px) {
    /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 769px or larger -- so desktop */
}


/*********************************************************************
  YOUR MEDIUM-DESKTOP-ONLY STYLES GO HERE
*********************************************************************/

@media(min-width: 805px) {
    /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 769px or larger -- so desktop */
    .container {
        padding: 0;
    }
}


/*********************************************************************
  YOUR LARGE DESKTOP-ONLY STYLES GO HERE
*********************************************************************/

@media(min-width: 1205px) {
    /* Any adjustments for desktop and larger go here.
    Note these styles will be applied to anything 769px or larger -- so desktop */
    .container.image .caption,
    .container.image figcaption {
        padding: 5px 0;
    }
}
